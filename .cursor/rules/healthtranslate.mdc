---
description: 
globs: 
alwaysApply: true
---
# HealthTranslateMini: Cursor Rules

## Project Structure

- The main frontend and backend code is in the [`app/`](mdc:app) directory.
  - API routes (Edge handlers) are in [`app/api/**/route.ts`](mdc:app/api).
  - Shared UI components are in [`components/`](mdc:components).
  - Non-UI helpers are in [`lib/`](mdc:lib).
- The project root contains configuration and environment files:
  - [`next.config.mjs`](mdc:next.config.mjs), [`tailwind.config.ts`](mdc:tailwind.config.ts), [`tsconfig.json`](mdc:tsconfig.json), [`package.json`](mdc:package.json)
  - Environment variables: [`.env.example`](mdc:.env.example), `.env.local` (user-managed, not committed)
- See [`docs/document-tree.txt`](mdc:docs/document-tree.txt) for a full directory tree and key file descriptions.

## Coding Standards

- Use Next.js 14 App Router and Edge Runtime for API routes.
- All React components must be functional and written in TypeScript (strict mode).
- Use Tailwind utility classes; do not create separate CSS files.
- Use the Web Speech API (`SpeechRecognition`) for STT in the browser.
- Call Mistral and ElevenLabs APIs via fetch inside Edge routes.
- Stream data with Server-Sent Events (SSE); do not use WebSockets.
- Supabase (if used) must be imported from `@supabase/ssr` only.
- All endpoints must be protected by Row Level Security (RLS) in Supabase.

## Folder Conventions

- `app/api/**/route.ts`: Edge API handlers.
- `components/XXX.tsx`: Shared UI components.
- `lib/**`: Non-UI helpers.

## Environment Files

- `.env.example` must include placeholders for all required keys.
- `.env.local` is for user secrets and is not committed.

## API Endpoints

- All new endpoints must be documented and follow RESTful conventions.
- Main endpoints:
  - `app/api/room/route.ts`: `POST` (create room), `GET` (join room, case-insensitive)
  - `app/api/send-message/route.ts`: `POST` (send message)
  - `app/api/subscribe-messages/route.ts`: `GET` (subscribe to messages via SSE)

## Validation

- All UUIDs (roomId, userId, etc.) must be validated with regex before DB queries.
- All language codes must be validated using ISO-639/BCP-47 regex.
- All input strings must be trimmed and checked for non-whitespace content.
- Room code lookups must be case-insensitive.

## Logging & Security

- PHI/PII must never be logged in production.
- Error logs and responses must be environment-aware:
  - Detailed in development
  - Generic in production

## SSE (Server-Sent Events)

- All SSE stream chunks (messages, keepalives) must be encoded as Uint8Array.
- Keep-alive pings every 10 seconds to prevent idle disconnects.
- Resource cleanup (unsubscribe, clearInterval) must be robust on error/disconnect.

## Supabase

- Supabase client creation must be wrapped in try/catch.
- Errors must include the original error message/stack for debugging.
- All endpoints must be protected by RLS in Supabase.
- The public anon key is safe only because of RLS.

## Dependencies

- Use the latest stable versions of `@supabase/ssr` and `@supabase/supabase-js`.

## CI Checks

- Run `npx next lint` and `npx tsc --noEmit` before merging.

## Miscellaneous

- Do not ask for confirmation before making changes (`do_not_ask_confirmation: true`).
- For further details, see [`README.md`](mdc:README.md) and [`docs/cursorrules.txt`](mdc:docs/cursorrules.txt).

# HealthTranslateMini App Development Guidelines

## Project Overview
HealthTranslateMini is a real-time, multilingual, speech-to-speech translation web app prototype for patients and clinicians, designed for rapid development using browser APIs and Vercel Edge Functions.

## Tech Stack (Lean Plan)
-   **Frontend Framework:** Next.js 14 (App Router) with TypeScript.
-   **UI Components:** React 18 (Functional Components with Hooks).
-   **Styling:** Tailwind CSS (utility-first).
-   **Speech-to-Text (STT):** Browser Web Speech API (`SpeechRecognition`).
-   **Translation AI:** Mistral Chat Completion API (called via an Edge Function).
-   **Text-to-Speech (TTS):** ElevenLabs API (e.g., Flash v2.5 model, called via an Edge Function).
-   **API Layer:** Vercel Edge Functions (for `/api/translate`, `/api/tts`).
-   **Real-time UI Updates:** Server-Sent Events (SSE) where applicable.
-   **Optional Auth & Database:** Supabase (using `@supabase/ssr`).

## Coding Standards (from `.cursorrules`)
-   Next.js 14 App Router; Edge Runtime for API routes.
-   Use Web Speech API (`SpeechRecognition`) for STT.
-   Call Mistral and ElevenLabs via `fetch` inside Edge routes.
-   Stream data with Server-Sent Events; no WebSockets.
-   Tailwind utility classes; no separate CSS files.
-   All React components are functional; TypeScript strict mode on.
-   Optional Supabase: import from `@supabase/ssr` only.

## Folder Conventions (Simplified)
-   `app/api/**/route.ts` for Edge handlers.
-   `components/XXX.tsx` for shared UI components.
-   `lib/**` for non-UI helper functions (e.g., API client wrappers if needed, SSE helpers).
-   `app/page.tsx` (and other route groups like `app/(dashboard)/page.tsx` if auth is added).

## Environment Variables (Key Variables - see `.env.example`)
```dotenv
MISTRAL_API_KEY=
ELEVEN_API_KEY=
NEXT_PUBLIC_SUPPORTED_LANGS=en,es,id,zh # (example, can be extended)

# Optional for Supabase
# SUPABASE_URL=
# SUPABASE_ANON_KEY=
```

## Core Development Workflow (Simplified)
1.  **Mic Capture & Live Transcript (Client-Side):** `MicButton.tsx` uses Web Speech API, updates parent page state.
2.  **Edge Translation Route (`/api/translate`):** Takes text, calls Mistral, returns translation.
3.  **Dual Transcript UI:** `TranscriptPane.tsx` displays source and translated text.
4.  **Edge TTS Route (`/api/tts`):** Takes text, calls ElevenLabs, returns MP3 audio.
5.  **Speak Button:** Fetches TTS audio and plays it.
6.  **Language Selector:** For source and target languages.
7.  **(Optional) Supabase Auth & History.**

## Success Criteria (Key MVP Jobs from `.cursorrules`)
-   **Mic to transcript:** Speaking "hello" shows "hello" in the source transcript pane.
-   **Edge translate route:** A POST request to `/api/translate` (e.g., with "hello" to Spanish) returns JSON like `{translatedText: "hola"}`.
-   **Edge tts route:** A POST request to `/api/tts` (e.g., with "hola") returns playable `audio/mpeg` data.
-   **Streaming pipeline (UI):** Both transcript panes update live (or near live after API calls) without a full page reload.

## CI Checks (from `.cursorrules`)
-   `npx next lint`
-   `npx tsc --noEmit`

